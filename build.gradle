ext {
    windows = System.properties['os.name'].toLowerCase().contains('windows')
}
task test << {
    def failedProjects = []
    def ignoreHidden = ~/^(?!\.).*/
    projectDir.eachDirMatch(ignoreHidden) { dir ->
        dir.eachFileMatch(/build.gradle/) {
            if (execute(dir, "gradle clean compileJava") == 0 && execute(dir, "gradle test") != 0) {
                failedProjects << (dir.path - projectDir.path)
            }
        }
        dir.eachFileMatch(/pom.xml/) {
            // if compiling the project fails, the java versions probably don't match
            // if a project requires java 8 but we are testing with java 7 just ignore that project
            if (execute(dir, "mvn --batch-mode clean compile") == 0 && execute(dir, "mvn --batch-mode test") != 0) {
                failedProjects << (dir.path - projectDir.path)
            }
        }
    }
    assert failedProjects == []
}

private def execute(File directory, String command) {
        println command
        def cmd = ["cmd.exe", "/C"]
        def sh = ["sh", "-c"]
        def process = new ProcessBuilder((windows ? cmd : sh) + command)
                .redirectErrorStream(true)
                .directory(directory)
                .start()
        process.inputStream.eachLine { println it }
        process.waitFor();
        return process.exitValue()
}
